import { jsxs as _jsxs, jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import React from 'react';
const RunControls = ({ records, runValidation, temperature, setTemperature, advancedTemp, setAdvancedTemp }) => {
    if (records.length === 0)
        return null;
    return (_jsxs(_Fragment, { children: [_jsxs("p", { className: "text-green-600 mb-2", children: ["Loaded ", records.length, " records."] }), _jsxs("div", { className: "mb-4", children: [_jsx("label", { className: "font-semibold", children: "Sensitivity: " }), !advancedTemp ? (_jsxs("select", { className: "mt-1 border border-gray-300 rounded px-2 py-1", value: temperature, onChange: (e) => setTemperature(parseFloat(e.target.value)), children: [_jsx("option", { value: 0.0, children: "Strict" }), _jsx("option", { value: 0.7, children: "Balanced" }), _jsx("option", { value: 1.1, children: "Creative" })] })) : (_jsx("input", { type: "range", min: "0.0", max: "1.5", step: "0.1", value: temperature, onChange: (e) => setTemperature(parseFloat(e.target.value)), className: "w-full mt-1" })), _jsxs("div", { className: "mt-2 flex items-center gap-2", children: [_jsx("input", { type: "checkbox", checked: advancedTemp, onChange: (e) => setAdvancedTemp(e.target.checked) }), _jsx("label", { className: "text-sm text-gray-600", children: "Adjust Sensitivity manually" })] }), _jsxs("p", { className: "mt-1 text-sm text-gray-500", children: ["Current: ", temperature.toFixed(1)] })] }), _jsxs("div", { className: "flex gap-4 mb-4 max-w-[480px] mx-auto", children: [_jsx("button", { onClick: () => runValidation(false), className: "flex-1 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-xl transition duration-200 shadow-md", children: "Run Validation" }), _jsx("button", { onClick: () => runValidation(true), className: "flex-1 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-xl transition duration-200 shadow-md", children: "Run with RAG WM Rules" })] })] }));
};
export default RunControls;
